import React from 'react';
import styles from './EquipmentPopUp.module.scss'
import Close from '../../img/close.png'
import { $user } from "../../state/user";
import { $depStatus } from "../../state/user";
import { useStore } from "effector-react";
import { createEquipment } from "../../actions/CreateEquipment";
import { setShowTask } from "../../state/showTask";
import { getAllByAltText } from "@testing-library/react";
import { useState } from 'react';
import { editEquipment } from '../../actions/EditEquipment';

import { setEquipmentHistory } from '../../actions/setEquipmentHistory';

import { $allReqStatus, getAllReq } from '../../state';

import { MdSell, MdOutlineMonetizationOn, MdAttachment, MdAutoAwesomeMotion, MdOutlineLooksOne, MdOutlineLooksTwo, MdHourglassDisabled } from "react-icons/md";


const EquipmentPopUp = ({ method, close, item }) => {

    const user = useStore($user);
    const dep = useStore($depStatus);
    const tasks = useStore($allReqStatus);

    const user_name = user.NAME + " " + user.LAST_NAME + " " + user.SECOND_NAME;

    const [selectedStatus, setSelectedStatus] = useState(null);

    const [issueMethod, setIssueMethod] = useState("");
    const [noBlockNumberCheck, setNoBlockNumberCheck] = useState(true);

    const [showExtraInfo, setShowExtraInfo] = useState([]);

    const [tasksFilter, setTasksFilter] = useState({
        id: '',
        // techName: '',
        dateCreate: '',
        excludedType: '–¢–û'
    });

    const [form, setForm] = useState({
        id: '',
        name: '',
        type: '',
        type1: '',
        type2: '',
        payMethod: '',
        description: '',
        quantity: '',
        timeReturn: '',
        status: '',
        buhCounter: '',
        taskId: '',
        blockNumber: '',
        techName: '',
        brak: '',
        history: ''
    });

    const type_options = [
        { value: '–ú–æ–Ω—Ç–∞–∂–Ω—ã–µ', label: 'üõ†Ô∏è –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ' },
        { value: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', label: 'üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' },
        // { value: '–†–µ–º–ö–æ–º–ø–ª–µ–∫—Ç', label: 'üß∑ –†–µ–º–ö–æ–º–ø–ª–µ–∫—Ç' }
    ]

    const montazh_options = [
        { value: '–û—Ö—Ä–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∏', label: 'üîí –û—Ö—Ä–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∏' },
        { value: '–í–∏–¥–µ–æ–∫–∞–º–µ—Ä—ã', label: 'üé• –í–∏–¥–µ–æ–∫–∞–º–µ—Ä—ã' },
        { value: '–î–∞—Ç—á–∏–∫–∏', label: 'üå°Ô∏è –î–∞—Ç—á–∏–∫–∏' },
        { value: '–ü—Ä–æ—á–µ–µ', label: '–ü—Ä–æ—á–µ–µ' }
    ]

    //TODO - –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ select'—ã –Ω–∞ react-select'—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫ (—ç–º–æ–¥–∑–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö)
    const instrument_options = [
        { value: '–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã', label: '–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã' },
        { value: '–†—É—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', label: '–†—É—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' },
        { value: '–õ–µ—Å—Ç–Ω–∏—Ü—ã', label: '–õ–µ—Å—Ç–Ω–∏—Ü—ã' },
        { value: '–î—Ä–µ–ª–∏', label: '–î—Ä–µ–ª–∏' },
        { value: '–ü—Ä–æ—á–µ–µ', label: '–ü—Ä–æ—á–µ–µ' }
    ]

    const rashodnik_options = [
        { value: '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã', label: 'üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã' },
        { value: '–ö–ª—é—á–∏', label: 'üîë –ö–ª—é—á–∏' },
        { value: '–ö–∞–±–µ–ª–∏', label: 'üîå –ö–∞–±–µ–ª–∏' },
        { value: '–ü—Ä–æ—á–µ–µ', label: '–ü—Ä–æ—á–µ–µ' }
    ]

    const block_options = [
        { value: '–°–∏-–ù–æ—Ä–¥', label: '–°–∏-–ù–æ—Ä–¥' },
        { value: '–ù–µ–º–∞–Ω', label: '–ù–µ–º–∞–Ω' },
        { value: '–°—Ç—Ä—É–Ω–∞', label: '–°—Ç—Ä—É–Ω–∞' },
        { value: '–õ–∞—Ä—Å', label: '–õ–∞—Ä—Å' },
        { value: '–î—Ä—É–≥–æ–π', label: '–î—Ä—É–≥–æ–π' }
    ]

    const sensor_options = [
        { value: '–ê—Å—Ç—Ä–∞-8', label: '–ê—Å—Ç—Ä–∞-8' },
        { value: '–î—Ä—É–≥–æ–π', label: '–î—Ä—É–≥–æ–π' }
    ]

    const short_names = {
        "–û—Ö—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏": "–û—Ö—Ä–∞–Ω–Ω—ã–π –ë–ª–æ–∫",
        "–í–∏–¥–µ–æ–∫–∞–º–µ—Ä—ã": "–í–∏–¥–µ–æ–∫–∞–º–µ—Ä–∞",
        "–î–∞—Ç—á–∏–∫–∏": "–î–∞—Ç—á–∏–∫",
        "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã": "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä",
        "–†—É—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": "–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
        "–õ–µ—Å—Ç–Ω–∏—Ü—ã": "–õ–µ—Å—Ç–Ω–∏—Ü–∞",
        "–î—Ä–µ–ª–∏": "–î—Ä–µ–ª—å",
        "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã": "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä",
        "–ö–ª—é—á–∏": "–ö–ª—é—á",
        "–ö–∞–±–µ–ª–∏": "–ö–∞–±–µ–ª—å",
    }

    //React Icons for older browsers
    // FaWrench
    // FaToolbox
    // FaPaperclip

    // FaLock
    // FaCameraRetro

    // FaRulerCombined
    // FaHammer

    // FaCarBattery
    // FaKey


    const info_history = (item) => {

        const history_paragraphs = {
            create: <span style={{ color: '#003366' }}>–°–æ–∑–¥–∞–Ω–æ</span>,
            install: <span style={{ color: 'green' }}>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>,
            equip: <span style={{ color: 'yellow' }}>–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ</span>,
            delete: <span style={{ color: 'red' }}>–£–¥–∞–ª–µ–Ω–æ</span>,

            //–ø—Ä–∏ editStatus:
            –í—ã–¥–∞–Ω: <span style={{ color: '#f77f00' }}>–í—ã–¥–∞–Ω–æ</span>,
            –£—Ç–µ—Ä—è–Ω: <span style={{ color: '#d62828' }}>–£—Ç–µ—Ä—è–Ω–æ</span>,
            –í–æ–∑–≤—Ä–∞—â–µ–Ω: <span style={{ color: '#023047' }}>–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ</span>,
            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <span style={{ color: '#006d77' }}>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>,
            –£–¥–∞–ª–µ–Ω: <span style={{ color: 'red' }}>–£–¥–∞–ª–µ–Ω–æ</span>
        }

        return (JSON.parse(item.history)?.map(el =>
            <div className={styles.historyParagraphs}>

                <p onMouseOver={e => setShowExtraInfo([...showExtraInfo, el.date])} onMouseOut={e => setShowExtraInfo(showExtraInfo.filter(elem => elem !== el.date))}>{el.type === "editStatus" ? history_paragraphs[el.value.status] : history_paragraphs[el.type]}</p>

                <span className = {styles.extraInfoParagraphs}>

                    <p>{el.date}</p>
                    {showExtraInfo.includes(el.date) && el.value.hasOwnProperty('techName') ? el.techName !== "" ? <p style={{"color": "#390099" }}> –¢–µ—Ö–Ω–∏–∫: {el.value.techName.split(" ")[0]}</p> : null : null}
                    {showExtraInfo.includes(el.date) && el.hasOwnProperty('user') ? el.user !== "" ? <p style={{"color": "#9e0059" }}> –ò–∑–º–µ–Ω–∏–ª: {el.user.split(" ")[0]}</p> : null : null}
                    {showExtraInfo.includes(el.date) && el.hasOwnProperty('blockNumber') ? el.blockNumber !== "" ? <p style={{"color": "#9e0059" }}> –ù–æ–º–µ—Ä –±–ª–æ–∫–∞: {el.blockNumber.split(" ")[0]}</p> : null : null}
                    {showExtraInfo.includes(el.date) && el.hasOwnProperty('taskId') ? el.taskId !== "" ? <p style={{"color": "#9e0059" }}> ID –ó–∞—è–≤–∫–∏: {el.taskId.split(" ")[0]}</p> : null : null}

                </span>
            </div>
        ))
    }

    //–ó–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –û–∫–Ω–æ
    const closePopUp = (element) => {
        element.stopPropagation()
        close(false)
        //console.log("–û–∫–Ω–æ –ó–∞–∫—Ä—ã—Ç–æ")
    }

    return (
        // –î–∏–≤—ã, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ —Ä–∞–∑–º–µ—Ä –í—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –û–∫–Ω–∞
        <div className={styles.wrapper}> <div className={styles.popUpWrapper}> <div className={styles.closeWrapper} onClick={(e) => { closePopUp(e); }}><img src={Close} alt="" /></div>

            {/* ANCHOR - –ú–ï–¢–û–î - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ */}
            {method === "info" ?
                <div className={styles.equipmentInfo}>
                    <div className={styles.block}>
                        <p className={styles.title}>{item.name}</p>
                        <p>–¢–∏–ø: {item.type1}{item.type2 ? "/" + item.type2 : ""}</p>
                        <p>–û–ø–∏—Å–∞–Ω–∏–µ: {item.description}</p>
                        <p>–°—Ç–∞—Ç—É—Å: {item.status}</p>
                        <p>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞: {item.techName}</p>
                        {item.payMethod ? <p>–í–∏–¥ –æ–ø–ª–∞—Ç—ã: {item.payMethod}</p> : null}
                        {item.quantity ? <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}</p> : null}
                        {item.blockNumber && item.blockNumber !== "0" ? <p>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –±–ª–æ–∫–æ–º: ‚Ññ{item.blockNumber}</p> : null}

                    </div>

                    <div className={styles.block}>
                        <p className={styles.title}>–ò—Å—Ç–æ—Ä–∏—è:</p>
                        {info_history(item)}

                    </div>
                </div>
                : null}

            {/* ANCHOR - –ú–ï–¢–û–î - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ */}
            {method === "create" ?
                <div className={styles.equipmentCreate}>

                    <b>–í–∏–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>
                    <select onChange={(e) => {
                        setForm(prevState => ({ ...prevState, type: e.target.value, name: "", type1: "", type2: "" }))
                    }}>
                        {type_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>)}
                        <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –í–∏–ø –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</option>
                    </select>

                    {form.type !== "" ? <div>
                        <b>–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>
                        <select onChange={(e) => {
                            setForm(prevState => ({ ...prevState, type1: e.target.value, name: short_names[e.target.value] }))
                        }}>
                            {form.type === "–ú–æ–Ω—Ç–∞–∂–Ω—ã–µ" ? montazh_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>) : null}
                            {form.type === "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" ? instrument_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>) : null}
                            {/* {form.type === "–†–µ–º–ö–æ–º–ø–ª–µ–∫—Ç" ? rashodnik_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>) : null} */}
                            <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¢–∏–ø –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</option>
                        </select>


                        {form.type1 === "–û—Ö—Ä–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∏" ? <div> <b>–¢–∏–ø –±–ª–æ–∫–∞:</b>
                            <select onChange={(e) => {
                                setForm(prevState => ({ ...prevState, type2: e.target.value, name: e.target.value + " ‚Ññ" }))
                            }}>
                                {block_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>)}
                                <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¢–∏–ø –ë–ª–æ–∫–∞</option>
                            </select>
                        </div>
                            : null}

                        {form.type1 === "–î–∞—Ç—á–∏–∫–∏" ? <div> <b>–¢–∏–ø –±–ª–æ–∫–∞:</b>
                            <select onChange={(e) => {
                                setForm(prevState => ({ ...prevState, type2: e.target.value, name: e.target.value + " ‚Ññ" }))
                            }}>
                                {sensor_options.map(el => <option value={el.value} key={el.value}>{el.label}</option>)}
                                <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¢–∏–ø –î–∞—Ç—á–∏–∫–∞</option>
                            </select>
                        </div>
                            : null}


                        {/* {form.type === "–†–µ–º–ö–æ–º–ø–ª–µ–∫—Ç" ? <div>
                            <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>
                            <div className={styles.rashodnikQuantity}>
                                <label style={{ "color": form.quantity === "–ï–¥–∏–Ω–∏—á–Ω—ã–π" ? "#003366" : "grey", "borderColor": form.quantity === "–ï–¥–∏–Ω–∏—á–Ω—ã–π" ? "#003366" : "grey" }}>
                                    <input type="radio" value="–ï–¥–∏–Ω–∏—á–Ω—ã–π" name="quantity" checked={form.quantity === '–ï–¥–∏–Ω–∏—á–Ω—ã–π'} onChange={(e) => setForm((prevState) => ({ ...prevState, quantity: e.target.value }))} />
                                    <MdAttachment style={{ "padding-right": "0.1rem" }} />–ï–¥–∏–Ω–∏—á–Ω—ã–π
                                </label>
                                <label style={{ "color": form.quantity === "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π" ? "#003366" : "grey", "borderColor": form.quantity === "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π" ? "#003366" : "grey" }}>
                                    <input type="radio" value="–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π" name="quantity" checked={form.quantity === '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π'} onChange={(e) => setForm((prevState) => ({ ...prevState, quantity: e.target.value }))} />
                                    <MdAutoAwesomeMotion style={{ "padding-right": "0.1rem" }} />–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
                                </label>
                            </div> </div>
                            : null} */}

                        <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</b>
                        <input type="text" value={form.name} onChange={(e) => {
                            setForm(prevState => ({ ...prevState, name: e.target.value }))
                        }}></input>


                        {form.type === "–ú–æ–Ω—Ç–∞–∂–Ω—ã–µ" ?
                            <div>
                                <b>–ù–æ–º–µ—Ä –ó–∞—è–≤–∫–∏*:</b>
                                <input style={{ "width": "20%" }} type="text" value={form.buhCounter} onChange={(e) => {
                                    if (/^\d+$/.test(e.target.value) || e.target.value.length === 0) {
                                        setForm(prevState => ({ ...prevState, buhCounter: e.target.value }))
                                    }
                                }}></input>

                                <b>–í–∏–¥ –æ–ø–ª–∞—Ç—ã*:</b>
                                <div className={styles.divPayMethod}>
                                    <label style={{ "color": form.payMethod === "–û–ø–ª–∞—á–µ–Ω–æ" ? "#003366" : "grey", "borderColor": form.payMethod === "–û–ø–ª–∞—á–µ–Ω–æ" ? "#003366" : "grey" }}>
                                        <input type="radio" value="–û–ø–ª–∞—á–µ–Ω–æ" name="payMethod" checked={form.payMethod === '–û–ø–ª–∞—á–µ–Ω–æ'} onChange={(e) => setForm((prevState) => ({ ...prevState, payMethod: e.target.value }))} />
                                        <MdSell style={{ "padding-right": "0.1rem" }} />–û–ø–ª–∞—á–µ–Ω–æ
                                    </label>
                                    <label style={{ "color": form.payMethod === "–ê—Ä–µ–Ω–¥–∞" ? "#003366" : "grey", "borderColor": form.payMethod === "–ê—Ä–µ–Ω–¥–∞" ? "#003366" : "grey" }}>
                                        <input type="radio" value="–ê—Ä–µ–Ω–¥–∞" name="payMethod" checked={form.payMethod === '–ê—Ä–µ–Ω–¥–∞'} onChange={(e) => setForm((prevState) => ({ ...prevState, payMethod: e.target.value }))} />
                                        <MdOutlineMonetizationOn style={{ "padding-right": "0.1rem" }} />–ê—Ä–µ–Ω–¥–∞
                                    </label>
                                </div>
                            </div> : null}

                        {form.type === "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" ?
                            <div>
                                <b>–í–µ—Ä–Ω—É—Ç—å —á–µ—Ä–µ–∑ (–¥–Ω–µ–π)*:</b>
                                <div className={styles.divTimeReturn}>
                                    <label style={{ "color": form.timeReturn === "1 –¥–µ–Ω—å" ? "#003366" : "grey", "borderColor": form.timeReturn === "1 –¥–µ–Ω—å" ? "#003366" : "grey" }}>
                                        <input type="radio" value="1 –¥–µ–Ω—å" name="timeReturn" checked={form.timeReturn === '1 –¥–µ–Ω—å'} onChange={(e) => setForm((prevState) => ({ ...prevState, timeReturn: e.target.value }))} />
                                        <MdOutlineLooksOne style={{ "padding-right": "0.1rem" }} />1 –¥–µ–Ω—å
                                    </label>
                                    <label style={{ "color": form.timeReturn === "2 –¥–Ω—è" ? "#003366" : "grey", "borderColor": form.timeReturn === "2 –¥–Ω—è" ? "#003366" : "grey" }}>
                                        <input type="radio" value="2 –¥–Ω—è" name="timeReturn" checked={form.timeReturn === '2 –¥–Ω—è'} onChange={(e) => setForm((prevState) => ({ ...prevState, timeReturn: e.target.value }))} />
                                        <MdOutlineLooksTwo style={{ "padding-right": "0.1rem" }} />2 –¥–Ω—è
                                    </label>
                                    <label style={{ "color": form.timeReturn === "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" ? "#003366" : "grey", "borderColor": form.timeReturn === "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" ? "#003366" : "grey" }}>
                                        <input type="radio" value="–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" name="timeReturn" checked={form.timeReturn === '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'} onChange={(e) => setForm((prevState) => ({ ...prevState, timeReturn: e.target.value }))} />
                                        <MdHourglassDisabled style={{ "padding-right": "0.1rem" }} />–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
                                    </label>
                                </div>
                            </div> : null}

                        <b>–î–æ–ø. –û–ø–∏—Å–∞–Ω–∏–µ*:</b>
                        <input type="text" value={form.description} onChange={(e) => {
                            setForm(prevState => ({ ...prevState, description: e.target.value }))
                        }}></input>
                    </div> : null}

                    <b>–¢–µ—Ö–Ω–∏–∫:</b>
                    <select onChange={(e) => {
                        setForm(prevState => ({ ...prevState, techName: e.target.value }))
                    }}>
                        {dep.map(e => e.LAST_NAME + " " + e.NAME + " " + e.SECOND_NAME).filter(el => !el.includes("–ù–∞—á–∞–ª—å–Ω–∏–∫")).map(el => <option value={el} key={el}>{el}</option>)}
                        <option value="–ò—Ä–∞–ª–∏–µ–≤ –§–∞—Ä–∏–¥ –ê–ø–∞—Ö–æ–≤–∏—á">{"–ò—Ä–∞–ª–∏–µ–≤ –§–∞—Ä–∏–¥ –ê–ø–∞—Ö–æ–≤–∏—á"}</option>
                        <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¢–µ—Ö–Ω–∏–∫–∞</option>
                    </select>

                    <p></p>
                    <button onClick={async (e) => {
                        if (form.type === '') {
                            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∏–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!!');
                            return;
                        } else if (form.type1 === '') {
                            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!!');
                            return;
                        } else if (form.name === '') {
                            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è!!');
                            return;
                        } else if ((form.type1 === '–û—Ö—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏' || form.type1 === '–î–∞—Ç—á–∏–∫–∏') && form.type3 === '') {
                            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø –±–ª–æ–∫–∞/–¥–∞—Ç—á–∏–∫–∞!!');
                            return;
                            // } else if (form.type === '–†–µ–º–ö–æ–º–ø–ª–µ–∫—Ç' && form.quantity === '') {
                            //     alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤!!');
                            //     return;
                        } else if (form.techName === '') {
                            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∞!!');
                            return;
                        } else {
                            await createEquipment(form, user) ?
                                closePopUp(e)
                                : console.log("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
                        }
                    }
                    }>–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</button>
                </div>
                : null}

            {/* ANCHOR - –ú–ï–¢–û–î -–ò–∑–º–µ–Ω–µ–Ω–∏–µ –°—Ç–∞—Ç—É—Å–∞ */}
            {method === "editStatus" ?
                <div className={styles.equipmentEditStatus}>

                    {item.status === "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" ?
                        <div>
                            <b>–ë–ª–æ–∫ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: </b><b style={{ "color": "green" }}>{JSON.parse(item.history).filter(el => el.type === "install").slice(-1)[0].date}</b><br />
                            <b>–ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞: </b><b style={{ "color": "green" }}>{JSON.parse(item.history).filter(el => el.type === "install").slice(-1)[0].value.blockNumber}</b><br />
                            <b>–£—Å—Ç–∞–Ω–æ–≤–∏–ª: </b><b style={{ "color": "green" }}>{JSON.parse(item.history).filter(el => el.type === "install").slice(-1)[0].value.techName}</b><br />
                        </div> : <div>
                            <p>–°—Ç–∞—Ç—É—Å: {item.status}</p>
                            <p>–ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}</p>
                            <p>–ó–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞: {item.techName}</p>
                        </div>}

                    {selectedStatus ?
                        selectedStatus === "–í—ã–¥–∞–Ω" ? <div>
                            {/* TODO - –°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ –∑–∞—è–≤–∫–µ */}
                            <b className={styles.title}>–ü—Ä–∏–≤—è–∑–∞—Ç—å:</b>

                            <div className={styles.divIssueMethod}>
                                <label style={{ "color": issueMethod === "–ó–∞—è–≤–∫–∞" ? "#003366" : "grey", "borderColor": issueMethod === "–ó–∞—è–≤–∫–∞" ? "#003366" : "grey" }}>
                                    <input type="radio" value="–ó–∞—è–≤–∫–∞" name="issueMethod" checked={issueMethod === '–ó–∞—è–≤–∫–∞'} onChange={(e) => setIssueMethod("–ó–∞—è–≤–∫–∞")} />
                                    <MdOutlineLooksOne style={{ "padding-right": "0.1rem" }} />–ó–∞—è–≤–∫–∞
                                </label>
                                <label style={{ "color": issueMethod === "–ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞" ? "#003366" : "grey", "borderColor": issueMethod === "–ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞" ? "#003366" : "grey" }}>
                                    <input type="radio" value="–ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞" name="issueMethod" checked={issueMethod === '–ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞'} onChange={(e) => setIssueMethod("–ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞")} />
                                    <MdOutlineLooksTwo style={{ "padding-right": "0.1rem" }} />–ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞
                                </label>
                            </div>


                            {issueMethod === "–ó–∞—è–≤–∫–∞" ?

                                <div>
                                    {/* <select onChange={(e) => {
                                        setSelectedTechName(e.target.value);
                                    }}>
                                        {dep.map(e => e.LAST_NAME + " " + e.NAME + " " + e.SECOND_NAME).filter(el => !el.includes("–ù–∞—á–∞–ª—å–Ω–∏–∫")).map(el => <option value={el} key={el}>{el}</option>)}
                                        <option value="–ò—Ä–∞–ª–∏–µ–≤ –§–∞—Ä–∏–¥ –ê–ø–∞—Ö–æ–≤–∏—á">{"–ò—Ä–∞–ª–∏–µ–≤ –§–∞—Ä–∏–¥ –ê–ø–∞—Ö–æ–≤–∏—á"}</option>
                                        <option value="" selected disabled hidden>–í—ã–±–µ—Ä–∏—Ç–µ –¢–µ—Ö–Ω–∏–∫–∞</option>
                                    </select> */}


                                    {/* <b>–¢–æ–ª—å–∫–æ –°–µ–≥–æ–¥–Ω—è</b>
                                    <input className={styles.checkbox} type="checkbox" checked={tasksFilter.dateCreate===Date.now()} onClick={e => e.target.checked ? setTasksFilter(array => ({...array, dateCreate: Date.now()})) : setTasksFilter(array => ({...array, dateCreate: ''}))}></input> */}

                                    <b>–ë–µ–∑ –¢–û</b>
                                    <input className={styles.checkbox} type="checkbox" checked={tasksFilter.excludedType === "–¢–û"} onClick={e => e.target.checked ? setTasksFilter(array => ({ ...array, excludedType: "–¢–û" })) : setTasksFilter(array => ({ ...array, excludedType: "" }))}></input>


                                    <div className={styles.divIssueMethodTasks}>
                                        {tasks.filter(el => el[42] === item.techName && (el[18] === "–ù–æ–≤–∞—è" || el[18] === "–í —Ä–∞–±–æ—Ç–µ") && el[8] !== tasksFilter.excludedType).map(element =>
                                            <div className={styles.divReqInfo} style={{ "color": tasksFilter.id === element[0] ? "#003366" : "grey", "borderColor": tasksFilter.id === element[0] ? "#003366" : "grey" }} onClick={e => tasksFilter.id !== element[0] ? setTasksFilter(array => ({ ...array, id: element[0] })) : setTasksFilter(array => ({ ...array, id: '' }))}>
                                                <div className={styles.divReqInfoText}>
                                                    <b style={{ fontWeight: "bold", "color": tasksFilter.id === element[0] ? "#003366" : "grey", "borderColor": tasksFilter.id === element[0] ? "#003366" : "grey" }}>{element[8]}</b>
                                                    <p style={{ textDecoration: "underline", "color": tasksFilter.id === element[0] ? "#003366" : "grey", "borderColor": tasksFilter.id === element[0] ? "#003366" : "grey" }}>{element[2]}</p>
                                                    <p style={{ "color": tasksFilter.id === element[0] ? "#003366" : "grey", "borderColor": tasksFilter.id === element[0] ? "#003366" : "grey" }}>{element[4]}</p>
                                                    <p style={{ fontStyle: "italic", "color": tasksFilter.id === element[0] ? "#003366" : "grey", "borderColor": tasksFilter.id === element[0] ? "#003366" : "grey" }}>–°–æ–∑–¥–∞–Ω–∞: {element[17]}</p>
                                                </div>
                                            </div>)
                                        }
                                    </div> </div> : null}


                            {issueMethod === "–ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞" ? <div className={styles.divIssueMethodBlockNumber}>
                                {noBlockNumberCheck === false ? <div>
                                    <p className={styles.title}>–í–≤–µ–¥–∏—Ç–µ –ü—É–ª—å—Ç–æ–≤–æ–π –ù–æ–º–µ—Ä –ë–ª–æ–∫–∞:</p>
                                    <input type="text" value={form.blockNumber} onChange={(e) => {
                                        setForm(prevState => ({ ...prevState, blockNumber: e.target.value }))
                                    }}></input>
                                </div> : null}
                                <p className={styles.title} style={{ display: 'inline' }}>–ë–µ–∑ –ü—É–ª—å—Ç–æ–≤–æ–≥–æ –ù–æ–º–µ—Ä–∞ –ë–ª–æ–∫–∞:</p>
                                <input className={styles.checkbox} type="checkbox" checked={noBlockNumberCheck} onClick={e => e.target.checked ? setNoBlockNumberCheck(true) : setNoBlockNumberCheck(false)}></input>
                            </div> : null}

                            <button style={{ backgroundColor: '#f77f00' }} onClick={e => editEquipment("editStatus", { id: item.id, status: '–í—ã–¥–∞–Ω', techName: item.techName, taskId: tasksFilter.id !== 0 ? tasksFilter.id : 0, blockNumber: noBlockNumberCheck !== 0 ? form.blockNumber : "0" }, user).then(closePopUp(e))
                            }>–í—ã–¥–∞—Ç—å</button>
                        </div> : null


                        : <div>
                            {item.status === "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" ?
                                <button style={{ backgroundColor: '#386641' }} onClick={e => editEquipment("editStatus", { id: item.id, status: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)', techName: item.techName }, user).then(closePopUp(e))}>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</button> : null}
                            {item.status === "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" ?
                                <button style={{ backgroundColor: '#bc4749' }} onClick={e => editEquipment("editStatus", { id: item.id, status: '–ë—Ä–∞–∫', techName: item.techName }, user).then(closePopUp(e))}>–ë—Ä–∞–∫</button> : null}


                            {item.status === "–°–æ–∑–¥–∞–Ω" || item.status === "–í–æ–∑–≤—Ä–∞—â–µ–Ω" || item.status === "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" ?
                                <button style={{ backgroundColor: '#f77f00' }} onClick={e => setSelectedStatus("–í—ã–¥–∞–Ω")}>–í—ã–¥–∞—Ç—å</button> : null}
                            {item.status === "–í—ã–¥–∞–Ω" ?
                                <button style={{ backgroundColor: '#d62828' }} onClick={e => editEquipment("editStatus", { id: item.id, status: '–£—Ç–µ—Ä—è–Ω', techName: item.techName }, user).then(closePopUp(e))}>–£—Ç–µ—Ä—è–Ω</button> : null}
                            {item.status === "–í—ã–¥–∞–Ω" ?
                                <button style={{ backgroundColor: '#023047' }} onClick={e => editEquipment("editStatus", { id: item.id, status: '–í–æ–∑–≤—Ä–∞—â–µ–Ω', techName: item.techName }, user).then(closePopUp(e))}>–í–æ–∑–≤—Ä–∞—â–µ–Ω</button> : null}

                            {item.status === "–£–¥–∞–ª–µ–Ω" ?
                                <button style={{ backgroundColor: '#006d77' }} onClick={e => editEquipment("editStatus", { id: item.id, status: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', techName: item.techName }, user).then(closePopUp(e))}>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button> : null}
                        </div>}

                </div> : null}


        </div></div>);
};

export default EquipmentPopUp;